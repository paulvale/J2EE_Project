package dao;

import static dao.DAOUtility.silentClosures;
import static dao.DAOUtility.PreparedRequestInitialization;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import org.joda.time.DateTime;

import beans.Survey;

public class SurveyDaoImpl implements SurveyDao 
{
	private static final String SURVEYACTIVE	  		= "Active";
	
    private static final String SQL_SELECT        		= "SELECT id, sujet, actif, createdAt FROM questionnaire ORDER BY id";
    private static final String SQL_SELECT_BY_ID	 	= "SELECT id, sujet, actif, createdAt FROM questionnaire WHERE id = ?";
    private static final String SQL_INSERT        		= "INSERT INTO questionnaire (sujet, actif, createdAt) VALUES (?, ?, ?)";
    private static final String SQL_UPDATE        		= "UPDATE questionnaire SET sujet = ?, actif = ? WHERE id = ?";
    private static final String SQL_DELETE_BY_ID 		= "DELETE FROM questionnaire WHERE id = ?";

    private DAOFactory          daoFactory;

    SurveyDaoImpl( DAOFactory daoFactory ) 
    {
        this.daoFactory = daoFactory;
    }

    /* Implémentation de la méthode définie dans l'interface ClientDao */
    @Override
    public Survey find( long lId ) throws DAOException 
    {
        return find( SQL_SELECT_BY_ID, lId );
    }

    /* Implémentation de la méthode définie dans l'interface ClientDao */
    @Override
    public void create( Survey survey ) throws DAOException 
    {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet AutoGeneratedValues = null;

        try 
        {
        	connection = daoFactory.getConnection();
        	boolean bActive = false;
        	String sStatus = survey.getActive();
        	if(sStatus.equals( SURVEYACTIVE )) 
        	{
        		bActive = true;
        	}
            preparedStatement = PreparedRequestInitialization( connection, SQL_INSERT, true,
                    survey.getSubject(),  bActive, new Timestamp( survey.getCreationDate().getMillis() ));
            int status = preparedStatement.executeUpdate();
            if ( status == 0 ) 
            {
                throw new DAOException( "Échec de la création du client, aucune ligne ajoutée dans la table." );
            }
            /*Peut être utile pour les questions et les réponses */
            AutoGeneratedValues = preparedStatement.getGeneratedKeys();
            if ( AutoGeneratedValues.next() ) 
            {
            	survey.setId( AutoGeneratedValues.getLong( 1 ) );
            } 
            else 
            {
                throw new DAOException( "Échec de la création du client en base, aucun ID auto-généré retourné." );
            }
            
        } 
        catch ( SQLException e ) 
        {
            throw new DAOException( e );
        } 
        finally 
        {
            silentClosures( AutoGeneratedValues, preparedStatement, connection );
        }
    }
    
    /* Implémentation de la méthode définie dans l'interface ClientDao */
    @Override
    public void modify( Survey survey ) throws DAOException 
    {
        Connection connection = null;
        PreparedStatement preparedStatement = null;

        try 
        {
        	connection = daoFactory.getConnection();
        	boolean bActive = false;
        	String sStatus = survey.getActive();
        	if(sStatus.equals( SURVEYACTIVE )) 
        	{
        		bActive = true;
        	}
            preparedStatement = PreparedRequestInitialization( connection, SQL_UPDATE, true,
                    survey.getSubject(),  bActive, survey.getId());
            //System.out.println(preparedStatement.toString());
            int status = preparedStatement.executeUpdate();
            if ( status == 0 ) 
            {
                throw new DAOException( "Échec de la création du client, aucune ligne ajoutée dans la table." );
            }
            
        } 
        catch ( SQLException e ) 
        {
            throw new DAOException( e );
        } 
        finally 
        {
            silentClosures( preparedStatement, connection );
        }
    }

    /* Implémentation de la méthode définie dans l'interface ClientDao */
    @Override
    public List<Survey> lister() throws DAOException 
    {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        List<Survey> surveys = new ArrayList<Survey>();

        try 
        {
            connection = daoFactory.getConnection();
            preparedStatement = connection.prepareStatement( SQL_SELECT );
            resultSet = preparedStatement.executeQuery();
            while ( resultSet.next() ) 
            {
                surveys.add( map( resultSet ) );
            }
        } 
        catch ( SQLException e ) 
        {
            throw new DAOException( e );
        } 
        finally 
        {
            silentClosures( resultSet, preparedStatement, connection );
        }

        return surveys;
    }

    /* Implémentation de la méthode définie dans l'interface ClientDao */
    @Override
    public void delete( Survey survey ) throws DAOException 
    {
        Connection connection = null;
        PreparedStatement preparedStatement = null;

        try 
        {
        	connection = daoFactory.getConnection();
            preparedStatement = PreparedRequestInitialization( connection, SQL_DELETE_BY_ID, true, survey.getId() );
            int statut = preparedStatement.executeUpdate();
            if ( statut == 0 ) 
            {
                throw new DAOException( "Échec de la suppression du questionnaire, aucune ligne supprimée de la table." );
            } 
            else 
            {
                survey.setId( null );
            }
        } 
        catch ( SQLException e ) 
        {
            throw new DAOException( e );
        } 
        finally 
        {
            silentClosures( preparedStatement, connection );
        }
    }

    /*
     * Méthode générique utilisée pour retourner un client depuis la base de
     * données, correspondant à la requête SQL donnée prenant en paramètres les
     * objets passés en argument.
     */
    private Survey find( String sql, Object... objects ) throws DAOException 
    {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        Survey survey = null;

        try 
        {
            /* Récupération d'une connexion depuis la Factory */
        	connection = daoFactory.getConnection();
            /*
             * Préparation de la requête avec les objets passés en arguments
             * (ici, uniquement un id) et exécution.
             */
            preparedStatement = PreparedRequestInitialization( connection, sql, false, objects );
            resultSet = preparedStatement.executeQuery();
            /* Parcours de la ligne de données retournée dans le ResultSet */
            if ( resultSet.next() ) 
            {
                survey = map( resultSet );
            }
        } 
        catch ( SQLException e ) 
        {
            throw new DAOException( e );
        } 
        finally 
        {
            silentClosures( resultSet, preparedStatement, connection );
        }

        return survey;
    }

    /*
     * Simple méthode utilitaire permettant de faire la correspondance (le
     * mapping) entre une ligne issue de la table des clients (un ResultSet) et
     * un bean Client.
     */
    private static Survey map( ResultSet resultSet ) throws SQLException 
    {
        Survey survey = new Survey();
        survey.setId(resultSet.getLong("id"));
        survey.setSubject(resultSet.getString("sujet"));
        if(resultSet.getInt("actif") == 1)
        {
        	survey.setActive(true);
        }
        else
        {
        	survey.setActive(false);
        }
        
        survey.setCreationDate( new DateTime( resultSet.getTimestamp( "createdAt" ) ) );
        
        return survey;
        /*
        client.setId( resultSet.getLong( "id" ) );
        client.setNom( resultSet.getString( "nom" ) );
        client.setPrenom( resultSet.getString( "prenom" ) );
        client.setAdresse( resultSet.getString( "adresse" ) );
        client.setTelephone( resultSet.getString( "telephone" ) );
        client.setEmail( resultSet.getString( "email" ) );
        client.setImage( resultSet.getString( "image" ) );
        return client;
        */
    }

}