package dao;

import static dao.DAOUtility.silentClosures;
import static dao.DAOUtility.PreparedRequestInitialization;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import org.joda.time.DateTime;

import beans.Answer;
import beans.Question;
import beans.Survey;

public class AnswerDaoImpl implements AnswerDao 
{
	private static final String ANSWERACTIVE	  					= "active";
	private static final String ANSWERVALIDE	  					= "valide";
	
    private static final String SQL_SELECT        					= "SELECT id, sujet, actif, createdAt FROM questionnaire ORDER BY id";
    private static final String SQL_SELECT_BY_ID	 				= "SELECT idReponse, idQuestionFK, idQuestionnaireFK, intitule, ordre, actif, valide FROM reponse WHERE idReponse = ?";
    private static final String SQL_INSERT        					= "INSERT INTO reponse (idQuestionFK, idQuestionnaireFK, intitule, ordre, actif, valide) VALUES (?, ?, ?, ?, ?, ?)";
    private static final String SQL_UPDATE        					= "UPDATE reponse SET idQuestionFK = ?, intitule = ?, ordre = ?, actif = ?, valide = ? WHERE idReponse = ?";
    private static final String SQL_DELETE_BY_ID 					= "DELETE FROM reponse WHERE idReponse = ?";
    private static final String SQL_SELECT_QUESTION_BY_ID			= "SELECT idQuestion, idQuestionnaire, intitule, ordre, actif FROM question WHERE idQuestion = ?";
    private static final String SQL_SELECT_BY_QUESTION	 			= "SELECT idReponse, idQuestionFK, idQuestionnaireFK, intitule, ordre, actif, valide FROM reponse WHERE idQuestionFK = ?";
    
    private DAOFactory          daoFactory;

    AnswerDaoImpl( DAOFactory daoFactory ) 
    {
        this.daoFactory = daoFactory;
    }

    /* Implémentation de la méthode définie dans l'interface ClientDao */
    @Override
    public Answer find( Long lId ) throws DAOException 
    {
        return find( SQL_SELECT_BY_ID, lId );
    }

    /* Implémentation de la méthode définie dans l'interface ClientDao */
    @Override
    public void create( Answer answer ) throws DAOException 
    {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet AutoGeneratedValues = null;

        try 
        {
        	connection = daoFactory.getConnection();
        	boolean bActive = false;
        	boolean bValide = false;
        	String sStatus = answer.getActive();
        	if(sStatus.equals( ANSWERACTIVE )) 
        	{
        		bActive = true;
        	}
        	String sValidity = answer.getValide();
        	if(sValidity.equals( ANSWERVALIDE )) 
        	{
        		bValide = true;
        	}
            preparedStatement = PreparedRequestInitialization( connection, SQL_INSERT, true, answer.getQuestion().getId(),
            		answer.getQuestion().getSurvey().getId(), answer.getText(), answer.getOrder(), bActive, bValide);
            int status = preparedStatement.executeUpdate();
            if ( status == 0 ) 
            {
                throw new DAOException( "Échec de la création de la question, aucune ligne ajoutée dans la table." );
            }
            /*Peut être utile pour les questions et les réponses */
            AutoGeneratedValues = preparedStatement.getGeneratedKeys();
            if ( AutoGeneratedValues.next() ) 
            {
            	answer.setId( AutoGeneratedValues.getLong( 1 ) );
            } 
            else 
            {
                throw new DAOException( "Échec de la création du client en base, aucun ID auto-généré retourné." );
            }
            
        } 
        catch ( SQLException e ) 
        {
            throw new DAOException( e );
        } 
        finally 
        {
            silentClosures( AutoGeneratedValues, preparedStatement, connection );
        }
    }
    
    /* Implémentation de la méthode définie dans l'interface ClientDao */
    @Override
    public void modify( Answer answer ) throws DAOException 
    {
        Connection connection = null;
        PreparedStatement preparedStatement = null;

        try 
        {
        	connection = daoFactory.getConnection();
        	boolean bActive = false;
        	boolean bValide = false;
        	String sStatus = answer.getActive();
        	if(sStatus.equals( ANSWERACTIVE )) 
        	{
        		bActive = true;
        	}
        	String sValidity = answer.getValide();
        	if(sValidity.equals( ANSWERVALIDE )) 
        	{
        		bValide = true;
        	}
            preparedStatement = PreparedRequestInitialization( connection, SQL_UPDATE, true, answer.getQuestion().getId(),
            		answer.getText(), answer.getOrder(), bActive, bValide, answer.getId());
            int status = preparedStatement.executeUpdate();
            if ( status == 0 ) 
            {
                throw new DAOException( "Échec de la création de la question, aucune ligne ajoutée dans la table." );
            }
            
        } 
        catch ( SQLException e ) 
        {
            throw new DAOException( e );
        } 
        finally 
        {
            silentClosures( preparedStatement, connection );
        }
    }

    /* Implémentation de la méthode définie dans l'interface ClientDao */
    @Override
    public List<Answer> lister(Long lQuestionId) throws DAOException 
    {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        List<Answer> answers = new ArrayList<Answer>();

        try 
        {
            connection = daoFactory.getConnection();
            preparedStatement = PreparedRequestInitialization( connection, SQL_SELECT_BY_QUESTION, false, lQuestionId );
            resultSet = preparedStatement.executeQuery();
            while ( resultSet.next() ) 
            {
            	answers.add( map( resultSet ) );
            }
        } 
        catch ( SQLException e ) 
        {
            throw new DAOException( e );
        } 
        finally 
        {
            silentClosures( resultSet, preparedStatement, connection );
        }

        return answers;
    }

    /* Implémentation de la méthode définie dans l'interface ClientDao */
    @Override
    public void delete( Answer answer ) throws DAOException 
    {
        Connection connection = null;
        PreparedStatement preparedStatement = null;

        try 
        {
        	connection = daoFactory.getConnection();
            preparedStatement = PreparedRequestInitialization( connection, SQL_DELETE_BY_ID, true, answer.getId() );
            int statut = preparedStatement.executeUpdate();
            if ( statut == 0 ) 
            {
                throw new DAOException( "Échec de la suppression du questionnaire, aucune ligne supprimée de la table." );
            } 
            else 
            {
                answer.setId( null );
            }
        } 
        catch ( SQLException e ) 
        {
            throw new DAOException( e );
        } 
        finally 
        {
            silentClosures( preparedStatement, connection );
        }
    }

    /*
     * Méthode générique utilisée pour retourner un client depuis la base de
     * données, correspondant à la requête SQL donnée prenant en paramètres les
     * objets passés en argument.
     */
    private Answer find( String sql, Object... objects ) throws DAOException 
    {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        Answer answer = null;

        try 
        {
            /* Récupération d'une connexion depuis la Factory */
        	connection = daoFactory.getConnection();
            /*
             * Préparation de la requête avec les objets passés en arguments
             * (ici, uniquement un id) et exécution.
             */
            preparedStatement = PreparedRequestInitialization( connection, sql, false, objects );
            resultSet = preparedStatement.executeQuery();
            /* Parcours de la ligne de données retournée dans le ResultSet */
            if ( resultSet.next() ) 
            {
            	answer = map( resultSet );
            }
        } 
        catch ( SQLException e ) 
        {
            throw new DAOException( e );
        } 
        finally 
        {
            silentClosures( resultSet, preparedStatement, connection );
        }

        return answer;
    }
    
    private Question findQuestion( String sql, Object... objects ) throws DAOException 
    {
    	
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        Question question = new Question();

        try 
        {
            /* Récupération d'une connexion depuis la Factory */
        	connection = daoFactory.getConnection();
            /*
             * Préparation de la requête avec les objets passés en arguments
             * (ici, uniquement un id) et exécution.
             */
            preparedStatement = PreparedRequestInitialization( connection, sql, false, objects );
            resultSet = preparedStatement.executeQuery();
            /* Parcours de la ligne de données retournée dans le ResultSet */
            if ( resultSet.next() ) 
            {
            	question.setId(resultSet.getLong("idQuestion"));
            	question.setText(resultSet.getString("intitule"));
                if(resultSet.getInt("actif") == 1)
                {
                	question.setActive(true);
                }
                else
                {
                	question.setActive(false);
                }
                
                question.setOrder(  resultSet.getLong( "ordre" ) );
            }
        } 
        catch ( SQLException e ) 
        {
            throw new DAOException( e );
        } 
        finally 
        {
            silentClosures( resultSet, preparedStatement, connection );
        }

        return question;
    }

    private Object getServletContext() {
		// TODO Auto-generated method stub
		return null;
	}

	/*
     * Simple méthode utilitaire permettant de faire la correspondance (le
     * mapping) entre une ligne issue de la table des clients (un ResultSet) et
     * un bean Client.
     */
    private Answer map( ResultSet resultSet ) throws SQLException 
    {
        Answer answer = new Answer();
        answer.setId(resultSet.getLong("idReponse"));
        answer.setText(resultSet.getString("intitule"));
        answer.setOrder(resultSet.getLong("ordre"));
        
        if(resultSet.getInt("actif") == 1)
        {
        	answer.setActive(true);
        }
        else
        {
        	answer.setActive(false);
        }
        
        if(resultSet.getInt("valide") == 1)
        {
        	answer.setValide(true);
        }
        else
        {
        	answer.setValide(false);
        }
        
        Question question = findQuestion(SQL_SELECT_QUESTION_BY_ID, resultSet.getLong("idQuestionFK"));
        answer.setQuestion(question);
        
        return answer;
        
    }

}